# .github/workflows/export-map-errors.yml

name: Map Error Workflows

on:
  issues:
    types: [opened, edited]
  workflow_dispatch:

jobs:
  update_title:
    permissions:
      issues: write
    if: github.event_name == 'issues' && (github.event.action == 'opened' || github.event.action == 'edited')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v6
        with:
          script: |
            const issue = context.payload.issue;
            const body = issue.body;
            const regex = /### Item Identifier\n\n(.+?)\n\n/;
            const match = body.match(regex);
            if (match) {
              const itemIdentifier = match[1].trim();
              const newTitle = `[Map Error] ${itemIdentifier}`;
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                title: newTitle
              });
            }

  validate_hydrolocations:
    permissions:
      issues: write
    if: github.event_name == 'issues' && (github.event.action == 'opened' || github.event.action == 'edited')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v6
        with:
          script: |
            const issue = context.payload.issue;
            const body = issue.body;
            const labels = issue.labels.map(label => label.name);
            if (!labels.includes('map-error-hydrolocations')) {
              return;
            }
            const issueTypeRegex = /### Issue Type\n\n(.+?)\n\n/;
            const newIdRegex = /### New ID\n\n(.+?)?\n\n/;
            const latitudeRegex = /### Latitude\n\n(.+?)?\n\n/;
            const longitudeRegex = /### Longitude\n\n(.+?)?\n\n/;
            const epsgRegex = /### EPSG Code\n\n(.+?)?\n\n/;
            const issueTypeMatch = body.match(issueTypeRegex);
            const newIdMatch = body.match(newIdRegex);
            const latitudeMatch = body.match(latitudeRegex);
            const longitudeMatch = body.match(longitudeRegex);
            const epsgMatch = body.match(epsgRegex);
            const issueType = issueTypeMatch ? issueTypeMatch[1].trim() : '';
            const newId = newIdMatch && newIdMatch[1] && newIdMatch[1].trim() !== '_No response_' ? newIdMatch[1].trim() : '';
            const latitude = latitudeMatch && latitudeMatch[1] && latitudeMatch[1].trim() !== '_No response_' ? latitudeMatch[1].trim() : '';
            const longitude = longitudeMatch && longitudeMatch[1] && longitudeMatch[1].trim() !== '_No response_' ? longitudeMatch[1].trim() : '';
            const epsg = epsgMatch && epsgMatch[1] && epsgMatch[1].trim() !== '_No response_' ? epsgMatch[1].trim() : '';
            const comments = [];
            if (issueType === 'Not indexed to the right flowpath' && !newId) {
              comments.push('Please provide a New ID for the correct flowpath, as you selected "Not indexed to the right flowpath".');
            }
            if (issueType === 'Add a hydrolocation feature') {
              const missingFields = [];
              if (!latitude) missingFields.push('Latitude');
              if (!longitude) missingFields.push('Longitude');
              if (!epsg) missingFields.push('EPSG Code');
              if (missingFields.length > 0) {
                comments.push(`Please provide the following details for "Add a hydrolocation feature": ${missingFields.join(', ')}.`);
              }
              if (newId) {
                comments.push('A New ID was provided, but it is only needed when "Not indexed to the right flowpath" is selected. Please update description if this is intentional.');
              }
            }
            if (comments.length > 0) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: comments.join('\n\n')
              });
            }

  export:
    permissions:
      issues: read
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Python 3.x
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install PyGithub pyproj
      - name: Export issues to CSV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          labels=("map-error-topo-fixes" "map-error-merge-flowpaths" "reid_divide-merge-flowpaths" "reid_divide-remove-flowpaths" "reid_divide-union-divides" "map-error-hydrolocations")
          for label in "${labels[@]}"; do
            python .github/scripts/export_map_errors.py --label "$label" --output "${label}.csv"
          done
      - name: Upload CSVs
        uses: actions/upload-artifact@v4
        with:
          name: map-error-reports
          path: |
            map-error-topo-fixes.csv
            map-error-merge-flowpaths.csv
            reid_divide-merge-flowpaths.csv
            reid_divide-remove-flowpaths.csv
            reid_divide-union-divides.csv
            map-error-hydrolocations.csv